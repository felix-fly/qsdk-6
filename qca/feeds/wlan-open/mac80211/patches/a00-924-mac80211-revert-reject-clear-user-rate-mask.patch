--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -2100,7 +2100,6 @@ static int ieee80211_change_bss(struct w
 					 params->basic_rates_len,
 					 &sdata->vif.bss_conf.basic_rates);
 		changed |= BSS_CHANGED_BASIC_RATES;
-		ieee80211_check_rate_mask(sdata);
 	}
 
 	if (params->ap_isolate >= 0) {
@@ -2811,21 +2810,6 @@ static int ieee80211_set_bitrate_mask(st
 	if (!ieee80211_sdata_running(sdata))
 		return -ENETDOWN;
 
-	/*
-	 * If active validate the setting and reject it if it doesn't leave
-	 * at least one basic rate usable, since we really have to be able
-	 * to send something, and if we're an AP we have to be able to do
-	 * so at a basic rate so that all clients can receive it.
-	 */
-	if (rcu_access_pointer(sdata->vif.chanctx_conf) &&
-	    sdata->vif.bss_conf.chandef.chan) {
-		u32 basic_rates = sdata->vif.bss_conf.basic_rates;
-		enum nl80211_band band = sdata->vif.bss_conf.chandef.chan->band;
-
-		if (!(mask->control[band].legacy & basic_rates))
-			return -EINVAL;
-	}
-
 	if (ieee80211_hw_check(&local->hw, HAS_RATE_CONTROL)) {
 		ret = drv_set_bitrate_mask(local, sdata, mask);
 		if (ret)
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -1889,8 +1889,6 @@ static void ieee80211_set_associated(str
 	sdata->u.mgd.associated = cbss;
 	memcpy(sdata->u.mgd.bssid, cbss->bssid, ETH_ALEN);
 
-	ieee80211_check_rate_mask(sdata);
-
 	sdata->u.mgd.flags |= IEEE80211_STA_RESET_SIGNAL_AVE;
 
 	if (sdata->vif.p2p ||
--- a/net/mac80211/rate.c
+++ b/net/mac80211/rate.c
@@ -2,7 +2,6 @@
  * Copyright 2002-2005, Instant802 Networks, Inc.
  * Copyright 2005-2006, Devicescape Software, Inc.
  * Copyright (c) 2006 Jiri Benc <jbenc@suse.cz>
- * Copyright 2017	Intel Deutschland GmbH
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -266,32 +265,6 @@ static void rate_control_free(struct iee
 	kfree(ctrl_ref);
 }
 
-void ieee80211_check_rate_mask(struct ieee80211_sub_if_data *sdata)
-{
-	struct ieee80211_local *local = sdata->local;
-	struct ieee80211_supported_band *sband;
-	u32 user_mask, basic_rates = sdata->vif.bss_conf.basic_rates;
-	enum nl80211_band band;
-
-	if (WARN_ON(!sdata->vif.bss_conf.chandef.chan))
-		return;
-
-	if (WARN_ON_ONCE(!basic_rates))
-		return;
-
-	band = sdata->vif.bss_conf.chandef.chan->band;
-	user_mask = sdata->rc_rateidx_mask[band];
-	sband = local->hw.wiphy->bands[band];
-
-	if (user_mask & basic_rates)
-		return;
-
-	sdata_dbg(sdata,
-		  "no overlap between basic rates (0x%x) and user mask (0x%x on band %d) - clearing the latter",
-		  basic_rates, user_mask, band);
-	sdata->rc_rateidx_mask[band] = (1 << sband->n_bitrates) - 1;
-}
-
 static bool rc_no_data_or_no_ack_use_min(struct ieee80211_tx_rate_control *txrc)
 {
 	struct sk_buff *skb = txrc->skb;
--- a/net/mac80211/rate.h
+++ b/net/mac80211/rate.h
@@ -72,8 +72,6 @@ static inline void rate_control_remove_s
 #endif
 }
 
-void ieee80211_check_rate_mask(struct ieee80211_sub_if_data *sdata);
-
 /* Get a reference to the rate control algorithm. If `name' is NULL, get the
  * first available algorithm. */
 int ieee80211_init_rate_ctrl_alg(struct ieee80211_local *local,
