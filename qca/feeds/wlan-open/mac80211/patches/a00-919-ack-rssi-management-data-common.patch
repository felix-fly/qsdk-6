--- a/drivers/net/wireless/ath/ath10k/mac.c
+++ b/drivers/net/wireless/ath/ath10k/mac.c
@@ -9222,6 +9222,11 @@ int ath10k_mac_register(struct ath10k *a
 	}
 
 	wiphy_ext_feature_set(ar->hw->wiphy, NL80211_EXT_FEATURE_VHT_IBSS);
+	if (test_bit(WMI_SERVICE_TX_DATA_ACK_RSSI, ar->wmi.svc_map) ||
+		test_bit(WMI_SERVICE_HTT_MGMT_TX_COMP_VALID_FLAGS,
+			ar->wmi.svc_map))
+ 		wiphy_ext_feature_set(ar->hw->wiphy,
+			NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT);
 
 	/*
 	 * on LL hardware queues are managed entirely by the FW
--- a/include/uapi/linux/nl80211.h
+++ b/include/uapi/linux/nl80211.h
@@ -2980,8 +2980,8 @@ enum nl80211_sta_bss_param {
  *	received from the station (u64, usec)
  * @NL80211_STA_INFO_PAD: attribute used for padding for 64-bit alignment
  * @NL80211_STA_INFO_ACK_SIGNAL: signal strength of the last ACK frame(u8, dBm)
- * @NL80211_STA_INFO_DATA_ACK_SIGNAL_AVG: avg signal strength of data ACK
- *     frame(s8, dBm)
+ * @NL80211_STA_INFO_ACK_SIGNAL_AVG: avg signal strength of ACK
+ *     frames(s8, dBm)
  * @__NL80211_STA_INFO_AFTER_LAST: internal
  * @NL80211_STA_INFO_MAX: highest possible station info attribute
  */
@@ -3021,7 +3021,7 @@ enum nl80211_sta_info {
 	NL80211_STA_INFO_RX_DURATION,
 	NL80211_STA_INFO_PAD,
 	NL80211_STA_INFO_ACK_SIGNAL,
-	NL80211_STA_INFO_DATA_ACK_SIGNAL_AVG,
+	NL80211_STA_INFO_ACK_SIGNAL_AVG,
 
 	/* keep last */
 	__NL80211_STA_INFO_AFTER_LAST,
@@ -5068,9 +5068,9 @@ enum nl80211_feature_flags {
  * @NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211: Driver supports sending and
  *	receiving control port frames over nl80211 instead of the netdevice.
  *
- * @NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT: This Driver support data ack
- *     rssi if firmware support, this flag is to intimate about ack rssi
- *     support to nl80211.
+ * @NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT: Driver support ack rssi if firmware
+ *	support, this flag is to intimate about ack rssi support
+ *	to nl80211.
  * @NUM_NL80211_EXT_FEATURES: number of extended features.
  * @MAX_NL80211_EXT_FEATURES: highest extended feature index.
  */
@@ -5102,7 +5102,7 @@ enum nl80211_ext_feature_index {
 	NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN,
 	NL80211_EXT_FEATURE_DFS_OFFLOAD,
 	NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211,
-	NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT,
+	NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT,
 
 	/* add new features before the definition below */
 	NUM_NL80211_EXT_FEATURES,
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -2289,19 +2289,19 @@ void sta_set_sinfo(struct sta_info *sta,
 		sinfo->filled |= BIT(NL80211_STA_INFO_EXPECTED_THROUGHPUT);
 		sinfo->expected_throughput = thr;
 	}
-
-	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL)) &&
-	    sta->status_stats.ack_signal_filled) {
-		sinfo->ack_signal = sta->status_stats.last_ack_signal;
-		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL);
-	}
 	if (ieee80211_hw_check(&sta->local->hw, REPORTS_TX_ACK_STATUS)) {
-		if (!(sinfo->filled &
-			BIT_ULL(NL80211_STA_INFO_DATA_ACK_SIGNAL_AVG))) {
-			sinfo->avg_ack_signal =
-			-(s8)ewma_avg_signal_read(&sta->avg_ack_signal);
-			sinfo->filled |=
-				BIT_ULL(NL80211_STA_INFO_DATA_ACK_SIGNAL_AVG);
+		if (sta->status_stats.ack_signal_filled && ((!(sinfo->filled &
+			BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL))) ||
+			(!(sinfo->filled &
+			BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL_AVG))))) {
+				sinfo->ack_signal =
+					sta->status_stats.last_ack_signal;
+				sinfo->filled |=
+					BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL);
+				sinfo->avg_ack_signal =
+					-(s8)ewma_avg_signal_read(&sta->avg_ack_signal);
+				sinfo->filled |=
+					BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL_AVG);
 		}
 	}
 }
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -4496,10 +4496,11 @@ static int nl80211_send_station(struct s
 	PUT_SINFO_U64(RX_DROP_MISC, rx_dropped_misc);
 	PUT_SINFO_U64(BEACON_RX, rx_beacon);
 	PUT_SINFO(BEACON_SIGNAL_AVG, rx_beacon_signal_avg, u8);
-	PUT_SINFO(ACK_SIGNAL, ack_signal, u8);
 	if (wiphy_ext_feature_isset(&rdev->wiphy,
-				    NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT))
-		PUT_SINFO(DATA_ACK_SIGNAL_AVG, avg_ack_signal, s8);
+				    NL80211_EXT_FEATURE_ACK_SIGNAL_SUPPORT)) {
+		PUT_SINFO(ACK_SIGNAL, ack_signal, u8);
+		PUT_SINFO(ACK_SIGNAL_AVG, avg_ack_signal, s8);
+	}
 
 #undef PUT_SINFO
 #undef PUT_SINFO_U64
